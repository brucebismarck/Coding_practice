'Question 1: Duplicate Email'

Write a SQL query to find all duplicate emails in a table named Person.

+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
For example, your query should return the following for the above table:

+---------+
| Email   |
+---------+
| a@b.com |
+---------+
###############################################################################
SELECT Email FROM Person
GROUP BY Email
HAVING Count(Email) > 1
###############################################################################
'Question 2: Employee earns more than their managers'
The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.

+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.

+----------+
| Employee |
+----------+
| Joe      |
+----------+

#############################################################################
SELECT  E.Name as Employee
FROM Employee E
LEFT JOIN Employee M
ON M.Id = E.ManagerId
WHERE E.Salary > M.Salary
##############################################################################
'Question 3 Combine two tables'

Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId is the primary key column for this table.
Table: Address

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId is the primary key column for this table.

Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:

FirstName, LastName, City, State
################################################################################
SELECT P.FirstName, P.LastName, A.City, A.State
FROM Person as P
LEFT JOIN Address as A
ON P.PersonId = A.PersonId
################################################################################
'Question 4: Customer who never order'
Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.

Table: Customers.

+----+-------+
| Id | Name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+
Table: Orders.

+----+------------+
| Id | CustomerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+
Using the above tables as example, return the following:

+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
#######################################################################
SELECT C.Name as Customers
FROM Customers C
LEFT JOIN Orders O
ON C.Id = O.CustomerId
WHERE O.CustomerId IS null
#######################################################################

'Q5 Rising Temperation'
Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.

+---------+------------+------------------+
| Id(INT) | Date(DATE) | Temperature(INT) |
+---------+------------+------------------+
|       1 | 2015-01-01 |               10 |
|       2 | 2015-01-02 |               25 |
|       3 | 2015-01-03 |               20 |
|       4 | 2015-01-04 |               30 |
+---------+------------+------------------+
For example, return the following Ids for the above Weather table:
+----+
| Id |
+----+
|  2 |
|  4 |
+----+
####################################################################
SELECT W1.Id FROM Weather W1
LEFT JOIN Weather W2
ON TO_DAYS(W1.Date) = TO_DAYS(W2.Date) + 1
WHERE W1.Temperature > W2.Temperature
####################################################################
#Be careful!!! Add 'TO_DAYS' to convert datetime to days
# Or use DATEDIFF(Date1, Date2) to calculate date difference
###################################################################
'question 6 Second highest salary'
Write a SQL query to get the second highest salary from the Employee table.

+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
For example, given the above Employee table, the second highest salary is 200. 
If there is no second highest salary, then the query should return null.

##########################################################################
SELECT max(Salary) as SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT max(Salary) FROM Employee)

简便做法！！
SELECT Salary as SecondHighestSalary
FROM Employee
ORDER BY Salary
LIMIT 1,1  # LIMIT 之后第一个字用来取间隔 第二个字是真
##########################################################################
# Note!!!!!!!!!!!!!  Use Max function will return 'null'
# Other wise, it will not return null if there is no second largest entry
#########################################################################
'Question 7, Delete duplicate'
Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.

+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+
Id is the primary key column for this table.
For example, after running your query, the above Person table should have the following rows:

+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+
###########################################################################
DELETE p1
FROM Person p1, Person p2
WHERE p1.Email = p2.Email
AND p1.Id > p2.Id
###########################################################################
'Question 8 Rank Score'
Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+
##########################################################################
SELECT Score, 
(SELECT COUNT(*)
FROM (SELECT DISTINCT Score s FROM Scores) tmp
WHERE s >= Score )
as Rank FROM Scores
ORDER BY Score DESC
##########################################################################
############This question tests how will you geneate a new column which is a rank
# the general idea is to use count number of item > than the target item 
##########################################################################
'Question 9' Consecutive Numbers
Write a SQL query to find all numbers that appear at least three times consecutively.

+----+-----+
| Id | Num |
+----+-----+
| 1  |  1  |
| 2  |  1  |
| 3  |  1  |
| 4  |  2  |
| 5  |  1  |
| 6  |  2  |
| 7  |  2  |
+----+-----+
For example, given the above Logs table, 1 is the only number that appears consecutively for at least three times.
#########################################################################
SELECT DISTINCT l1.Num as ConsecutiveNums
FROM Logs as l1, Logs as l2, Logs as l3
WHERE l1.Id = l2.Id-1 AND l1.Id = l3.Id-2
AND l1.Num = l2.Num AND l1.Num = l3.Num
#########################################################################
#关键在于敢用垃圾方法先写出来
########################################################################‘’
'Question 10' Department Highest Salary
The Employee table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.

+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
The Department table holds all departments of the company.

+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+
Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, Max has the highest salary in the IT department and Henry has the highest salary in the Sales department.

+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+
#######################################################################
SELECT D.Name AS Department ,E.Name AS Employee ,E.Salary 
FROM Employee E,Department D 
WHERE E.DepartmentId = D.id 
AND (DepartmentId,Salary) in 
 (SELECT DepartmentId,max(Salary) as max FROM Employee GROUP BY DepartmentId)
这个题问题在于max产生一个结果，并列结果需要先产生max然后 xxx in max
########################################################################
